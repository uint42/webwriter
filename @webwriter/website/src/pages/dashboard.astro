---
import Layout from "../layouts/Layout.astro";

import {msgResolver} from "../localize"

const lang = Astro.currentLocale!
const translations = {
  "Set your password": {"de": "Passwort setzen"},
  "Password": {"de": "Passwort"},
  "Confirm password": {"de": "Passwort bestätigen"},
  "Welcome": {"de": "Willkommen"},
  "Sign out": {"de": "Abmelden"},
  "Sign in": {"de": "Anmelden"},
  "Registration is not available as webwriter.app accounts are currently invitation only.": {"de": "Registrierung ist nicht verfügbar, da webwriter.app-Accounts aktuell nur per Einladung erhältlich sind."},
  "Login": {"de": "Anmelden"}
}

const msg = msgResolver(translations, lang)
---

<Layout title="Dashboard">
  <div id="dashboard-base" data-status="loading">
    <div id="setpassword" class="auth-card">
      <h1>{msg("Set your password")}</h1>
      <form id="setpassword-form" action="/" method="post">
        <label for="password">{msg("Password")}</label>
        <input type="password" name="password" id="password" required />
        <button type="submit">{msg("Confirm password")}</button>
      </form>
    </div>
    <div id="dash" class="auth-card">
      <h1>{msg("Welcome")}</h1>
      <button id="signout-button">{msg("Sign out")}</button>
    </div>
    <div id="signin" class="auth-card">
      <h1>{msg("Sign in")}</h1>
      <div class="banner">{msg("Registration is not available as webwriter.app accounts are currently invitation only.")}</div>
      <form id="signin-form">
        <label for="email">{msg("Email")}</label>
        <input type="email" name="email" id="email" required />
        <label for="password">{msg("Password")}</label>
        <input type="password" name="password" id="password" required />
        <button type="submit">{msg("Login")}</button>
      </form>
    </div>
  </div>
</Layout>

<script>


  import {pocketbase} from "../lib/pocketbase"
  const signinForm = (document.querySelector("#signin form") as HTMLFormElement)
  signinForm?.addEventListener("submit", async ev => {
    ev.preventDefault()
    const credentials = Object.fromEntries(new FormData(signinForm).entries()) as Record<string, string>
    await pocketbase.collection("users").authWithPassword(credentials.email, credentials.password)
    const cookie = pocketbase.authStore.exportToCookie({httpOnly: undefined, path: undefined, secure: true, maxAge: 1209600, sameSite: "Strict", domain: "run.webwriter.app"})
    document.cookie = cookie
  })
  /*
  const setpasswordForm = (document.querySelector("#setpassword form") as HTMLFormElement)
  setpasswordForm?.addEventListener("submit", async ev => {
    ev.preventDefault()
    const {password} = Object.fromEntries(new FormData(setpasswordForm).entries()) as Credentials
    const { error } = await supabase.auth.updateUser({password, data: {hasPassword: true}})
    if (error) {
      alert(error.message)
    }
  })*/

  const logoutButton = (document.querySelector("#signout-button") as HTMLButtonElement)
  logoutButton.addEventListener("click", async ev => {
    pocketbase.authStore.clear()
  })
</script>

<style is:global>

  body:not([data-status=signedout]) #signin {
    display: none;
  }

  body:not([data-status=setpassword]) #setpassword {
    display: none;
  }

  body:not([data-status=signedin]) #dash {
    display: none;
  }

  #dashboard-base .auth-card {
    max-width: 800px;
    margin: 2rem auto;
    --padding: 1rem;
    background: white;
    padding: 2rem;
    border: 2px solid var(--sl-color-gray-950);
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    overflow: hidden;
    background: var(--sl-color-gray-50);
  }

  #dashboard-base form {
    display: flex;
    flex-direction: column;
  }

  #dashboard-base label {
    margin-bottom: 0.25rem;
  }

  #dashboard-base .banner {
    background: var(--sl-color-warning-200);
    padding: 1rem;
    display: flex;
    flex-direction: row;
    justify-content: center;
    margin-bottom: 2rem;
  }

  #dashboard-base input {
    margin-bottom: 2rem;
    border: 2px solid var(--sl-color-gray-950);
    padding: 1rem;
    font-size: 1.125rem; 
    background: white;
  }

  #dashboard-base button {
    display: inline-block;
    background: var(--sl-color-primary-600);
    padding: 0.25rem 0.5rem;
    font-weight: bold;
    color: var(--sl-color-gray-50) !important;
    border-radius: var(--sl-border-radius-medium);
    border: 2px solid var(--sl-color-gray-950);
    text-align: center;
    cursor: pointer;
    padding: 1rem;
    font-size: 1.125rem; 

    &:hover {
      background: var(--sl-color-primary-500);
    }

    &:active {
      background: var(--sl-color-primary-700);
    }
  }

</style>